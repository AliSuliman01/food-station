
extend type Query {

    categories(
        orderBy: _ @orderBy(columns: ["created_at", "updated_at", "id"])
        hasTranslation: _ @whereHasConditions(relation:"translation" columns:["name","description","notes"])
        whereHas: _ @whereConditions(columns:["id"])
        hasParentCategory: _ @whereHasConditions(relation:"parent_category" columns:["name"])
    ): [Category]! @all


}

extend type Mutation {

    createCategory(input: CreateCategoryInput! @spread):Category @create
    updateCategory(id:ID!, input: UpdateCategoryInput! @spread):Category @update
    deleteCategory(id:ID! @whereKey):Category @delete

}

input CategoriesMorphToMany{
    connect:[ID!]
    disconnect:[ID!]
    sync:[ID!]
}

input CategoryBelongsTo{
    connect:ID
}
input CategoriesHasMany{
    create:[CreateCategoryInput!]!
}
input CreateCategoryInput{
    parent_category:CategoryBelongsTo
    name:String
    translations:TranslationsMorphMany
    ingredients:IngredientsBelongsToMany
    images:ImagesMorphMany
}
input UpdateCategoryInput{
    parent_category:CategoryBelongsTo
    name:String
    translations:TranslationsMorphMany
    ingredients:IngredientsBelongsToMany
    images:ImagesMorphMany
}
