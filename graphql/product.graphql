
extend type Query {
    most_popular_products(
        orderBy: _ @orderBy(columns: ["created_at", "updated_at", "id", "rate"])
        hasTranslation: _ @whereHasConditions(relation:"translation" columns:["name","description","notes"])
        hasRestaurant: _ @whereHasConditions(relation:"restaurant" columns:["name"])
        hasCategories: _ @whereHasConditions(columns:["id"])
    ):[Product]!

    available_today_products(
        orderBy: _ @orderBy(columns: ["created_at", "updated_at", "id", "rate"])
        hasTranslation: _ @whereHasConditions(relation:"translation" columns:["name","description","notes"])
        hasRestaurant: _ @whereHasConditions(relation:"restaurant" columns:["name"])
        hasCategories: _ @whereHasConditions(columns:["id"])
    ):[Product]!

    products(
        orderBy: _ @orderBy(columns: ["created_at", "updated_at", "id"])
        hasCategories: _ @whereHasConditions(columns:["id"])
        hasTranslation: _ @whereHasConditions(relation:"translation" columns:["name","description","notes"])
        hasRestaurant: _ @whereHasConditions(relation:"restaurant" columns:["name"])
    ): [Product]! @all

}
extend type Mutation {

    createProduct(input: CreateProductInput! @spread):Product @create
    updateProduct(id:ID!, input: UpdateProductInput! @spread):Product @update
    deleteProduct(id:ID! @whereKey):Product @delete

}

input CreateProductInput{
    price:Float!
    restaurant:RestaurantBelongsTo
    ingredients:IngredientsBelongsToMany
    media:ImagesMorphMany
    translations:TranslationsMorphMany
    categories: CategoriesMorphToMany
}

input UpdateProductInput{
    price:Float!
    restaurant:RestaurantBelongsTo
    ingredients:IngredientsBelongsToMany
    images:ImagesMorphMany
    translations:TranslationsMorphMany
    categories: CategoriesMorphToMany
}
