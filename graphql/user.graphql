
extend type Query {
    #    user(
    #      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
    #      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    #    ): User
    #    @find
    #    @can(ability: "show")

    paginationUsers(
        name: String @where(operator: "like")
    ): [User!]!
    @paginate(defaultCount: 10)
    @can(ability: "index")

    users(
        orderBy: _ @orderBy(columns: ["created_at", "updated_at", "id"])
        where: _ @whereConditions(columns: ["name", "email"])
    ):[User]!
    @all
    @can(ability: "index")


}
extend type Mutation{
    login(email:Email!, password:String!): LoginResponse
    register(name:String, email:Email!, password:String!, photo_path:String): RegisterResponse


    createUser(input: CreateUserInput! @spread):User
    @create
    @can(ability: "create")

    updateUser(id: ID!, input: UpdateUserInput! @spread):User
    @update
    @can(ability: "update")

    deleteUser(id:ID! @whereKey):User
    @delete
    @can(ability: "delete")

}

type LoginResponse{
    user:User
    access_token:String
    refresh_token:String
    query: Query!
}
type RegisterResponse{
    user:User
    access_token:String
    refresh_token:String
}
input CreateUserInput{
    name:String!
    email:String!
    password:String! @hash
    photo_path:String
}

input UpdateUserInput{
    name:String!
    email:String!
    password:String @hash
    photo_path:String
}
